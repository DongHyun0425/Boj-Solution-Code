#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;

int kill = 0;
int level = 2;
int rx = 0;
int ry = 0;
int sd[21][21];
int map[21][21];
int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,1,0,-1 };
int answer = 0;
int N = 0;
bool visited[21][21] = { false, };

void BFS(int rx, int ry) {
    queue<pair<int, pair<int, int>>>q;
    q.push({ 0,{rx,ry} });
    visited[rx][ry] = true;
    int m_min = 100;
    while (!q.empty()) {
        int cnt = q.front().first;
        int x = q.front().second.first;
        int y = q.front().second.second;
        q.pop();
        //물고기 발견
        if (map[x][y] != 0 && cnt < m_min && level > map[x][y]) {
            m_min = cnt;
        }

        sd[x][y] = cnt;

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < N && ny >= 0 && ny < N
                && cnt < sd[nx][ny] && level >= map[nx][ny] && cnt + 1 <= m_min && !visited[nx][ny]) {
                visited[nx][ny] = true;
                q.push({ cnt + 1,{nx,ny} });
            }
        }
    }
}


int main() {
    cin >> N;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            int tmp = 0;
            cin >> tmp;
            if (tmp == 9) {
                rx = i;
                ry = j;
                map[i][j] = 0;
            }
            else {
                map[i][j] = tmp;
            }
        }
    }

    while(1){
        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 21; j++) {
                sd[i][j] = 100;
                visited[i][j] = false;
            }
        }
        BFS(rx, ry);

        int kx = -1;
        int ky = -1;
        int m_m = 100;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (map[i][j] > 0 && map[i][j] < level && sd[i][j] < m_m) {
                    kx = i;
                    ky = j;
                    m_m = sd[i][j];
                }
            }
        }
        if (kx == -1) {
            break;
        }
        else {
            kill++;
            answer += sd[kx][ky];
            if (kill == level) {
                level++; kill = 0;
            }
            map[kx][ky] = 0;
            rx = kx;
            ry = ky;
        }
    
    }
    cout << answer;
    return 0;
}
